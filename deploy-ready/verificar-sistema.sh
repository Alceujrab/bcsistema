#!/bin/bash

# Script de Verifica√ß√£o P√≥s-Deploy
# Execute com: bash verificar-sistema.sh

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo -e "${GREEN}[OK] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[AVISO] $1${NC}"
}

error() {
    echo -e "${RED}[ERRO] $1${NC}"
}

info() {
    echo -e "${BLUE}[INFO] $1${NC}"
}

# Contadores
OK_COUNT=0
ERROR_COUNT=0
WARN_COUNT=0

check_ok() {
    log "$1"
    ((OK_COUNT++))
}

check_error() {
    error "$1"
    ((ERROR_COUNT++))
}

check_warn() {
    warn "$1"
    ((WARN_COUNT++))
}

echo "======================================"
echo "   VERIFICA√á√ÉO P√ìS-DEPLOY DO SISTEMA  "
echo "======================================"
echo ""

# 1. Verificar se estamos no diret√≥rio correto
info "üîç Verificando estrutura do projeto..."
if [ -f "artisan" ]; then
    check_ok "Diret√≥rio Laravel detectado"
else
    check_error "Arquivo artisan n√£o encontrado - execute no diret√≥rio raiz do Laravel"
    exit 1
fi

# 2. Verificar arquivos cr√≠ticos
info "üìÅ Verificando arquivos cr√≠ticos..."

# Controllers
if [ -f "app/Http/Controllers/TransactionController.php" ]; then
    if grep -q "quickUpdate" app/Http/Controllers/TransactionController.php; then
        check_ok "TransactionController modernizado"
    else
        check_warn "TransactionController pode n√£o estar atualizado"
    fi
else
    check_error "TransactionController n√£o encontrado"
fi

if [ -f "app/Http/Controllers/DashboardController.php" ]; then
    check_ok "DashboardController encontrado"
else
    check_error "DashboardController n√£o encontrado"
fi

# Views
if [ -f "resources/views/transactions/index.blade.php" ]; then
    if grep -q "bulk-actions" resources/views/transactions/index.blade.php; then
        check_ok "View de transa√ß√µes modernizada"
    else
        check_warn "View de transa√ß√µes pode n√£o estar atualizada"
    fi
else
    check_error "View de transa√ß√µes n√£o encontrada"
fi

if [ -f "resources/views/transactions/partials/table.blade.php" ]; then
    check_ok "View parcial da tabela encontrada"
else
    check_warn "View parcial da tabela n√£o encontrada"
fi

# JavaScript
if [ -f "public/js/transactions.js" ] || [ -f "resources/js/transactions.js" ]; then
    check_ok "JavaScript de transa√ß√µes encontrado"
else
    check_warn "JavaScript de transa√ß√µes n√£o encontrado"
fi

# 3. Verificar banco de dados
info "üóÑÔ∏è Verificando conex√£o com banco de dados..."
if php artisan tinker --execute="DB::connection()->getPdo(); echo 'DB OK';" 2>/dev/null | grep -q "DB OK"; then
    check_ok "Conex√£o com banco de dados"
else
    check_error "Problema na conex√£o com banco de dados"
fi

# 4. Verificar migrations
info "üìä Verificando migrations..."
PENDING_MIGRATIONS=$(php artisan migrate:status 2>/dev/null | grep -c "Pending" || echo "0")
if [ "$PENDING_MIGRATIONS" -eq "0" ]; then
    check_ok "Todas as migrations executadas"
else
    check_warn "$PENDING_MIGRATIONS migration(s) pendente(s)"
fi

# 5. Verificar rotas
info "üõ£Ô∏è Verificando rotas cr√≠ticas..."
if php artisan route:list | grep -q "transactions.index"; then
    check_ok "Rota de listagem de transa√ß√µes"
else
    check_error "Rota de listagem de transa√ß√µes n√£o encontrada"
fi

if php artisan route:list | grep -q "transactions.quick-update"; then
    check_ok "Rota de edi√ß√£o r√°pida"
else
    check_warn "Rota de edi√ß√£o r√°pida n√£o encontrada"
fi

if php artisan route:list | grep -q "transactions.bulk-delete"; then
    check_ok "Rota de exclus√£o em lote"
else
    check_warn "Rota de exclus√£o em lote n√£o encontrada"
fi

# 6. Verificar permiss√µes
info "üîê Verificando permiss√µes..."
if [ -w "storage" ] && [ -w "bootstrap/cache" ]; then
    check_ok "Permiss√µes de escrita nos diret√≥rios cr√≠ticos"
else
    check_error "Problemas de permiss√£o em storage ou bootstrap/cache"
fi

# 7. Verificar cache
info "üíæ Verificando cache..."
if [ -f "bootstrap/cache/config.php" ]; then
    check_ok "Cache de configura√ß√£o ativo"
else
    check_warn "Cache de configura√ß√£o n√£o encontrado"
fi

if [ -f "bootstrap/cache/routes-v7.php" ]; then
    check_ok "Cache de rotas ativo"
else
    check_warn "Cache de rotas n√£o encontrado"
fi

# 8. Verificar logs
info "üìã Verificando logs recentes..."
if [ -f "storage/logs/laravel.log" ]; then
    RECENT_ERRORS=$(tail -n 100 storage/logs/laravel.log | grep -c "ERROR" || echo "0")
    if [ "$RECENT_ERRORS" -eq "0" ]; then
        check_ok "Nenhum erro recente nos logs"
    else
        check_warn "$RECENT_ERRORS erro(s) recente(s) encontrado(s) nos logs"
    fi
else
    check_warn "Arquivo de log n√£o encontrado"
fi

# 9. Verificar modelos
info "üèóÔ∏è Verificando modelos..."
if [ -f "app/Models/Transaction.php" ]; then
    check_ok "Modelo Transaction encontrado"
else
    check_error "Modelo Transaction n√£o encontrado"
fi

if [ -f "app/Models/BankAccount.php" ]; then
    check_ok "Modelo BankAccount encontrado"
else
    check_error "Modelo BankAccount n√£o encontrado"
fi

if [ -f "app/Models/Category.php" ]; then
    check_ok "Modelo Category encontrado"
else
    check_error "Modelo Category n√£o encontrado"
fi

# 10. Teste de conectividade HTTP (se curl estiver dispon√≠vel)
if command -v curl &> /dev/null; then
    info "üåê Testando conectividade HTTP..."
    
    # Tentar diferentes URLs
    for url in "http://localhost" "http://localhost/dashboard" "http://127.0.0.1"; do
        HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$url" 2>/dev/null || echo "000")
        if [ "$HTTP_CODE" = "200" ]; then
            check_ok "Conectividade HTTP: $url ($HTTP_CODE)"
            break
        elif [ "$HTTP_CODE" != "000" ]; then
            check_warn "HTTP $HTTP_CODE para $url"
        fi
    done
else
    check_warn "curl n√£o dispon√≠vel para teste HTTP"
fi

# 11. Verificar estrutura de tabelas cr√≠ticas
info "üóÇÔ∏è Verificando estrutura de tabelas..."
TABLES_CHECK=$(php artisan tinker --execute="
try {
    \$tables = ['transactions', 'bank_accounts', 'categories'];
    foreach(\$tables as \$table) {
        if (Schema::hasTable(\$table)) {
            echo \$table . ' OK ';
        } else {
            echo \$table . ' MISSING ';
        }
    }
} catch (Exception \$e) {
    echo 'ERROR: ' . \$e->getMessage();
}
" 2>/dev/null || echo "ERROR")

if echo "$TABLES_CHECK" | grep -q "transactions OK"; then
    check_ok "Tabela transactions existe"
else
    check_error "Tabela transactions n√£o encontrada"
fi

if echo "$TABLES_CHECK" | grep -q "bank_accounts OK"; then
    check_ok "Tabela bank_accounts existe"
else
    check_error "Tabela bank_accounts n√£o encontrada"
fi

if echo "$TABLES_CHECK" | grep -q "categories OK"; then
    check_ok "Tabela categories existe"
else
    check_error "Tabela categories n√£o encontrada"
fi

# 12. Resumo final
echo ""
echo "======================================"
echo "         RESUMO DA VERIFICA√á√ÉO        "
echo "======================================"
echo ""
echo "üìä Estat√≠sticas:"
echo "   ‚úÖ Verifica√ß√µes OK: $OK_COUNT"
echo "   ‚ö†Ô∏è  Avisos: $WARN_COUNT"
echo "   ‚ùå Erros: $ERROR_COUNT"
echo ""

if [ $ERROR_COUNT -eq 0 ]; then
    if [ $WARN_COUNT -eq 0 ]; then
        echo "üéâ SISTEMA TOTALMENTE FUNCIONAL!"
        echo "   Todas as verifica√ß√µes passaram com sucesso."
    else
        echo "‚úÖ SISTEMA FUNCIONAL COM RESSALVAS"
        echo "   Existem alguns avisos que podem ser verificados."
    fi
else
    echo "‚ùå SISTEMA COM PROBLEMAS"
    echo "   Existem erros que precisam ser corrigidos."
fi

echo ""
echo "üîç Recomenda√ß√µes:"
if [ $ERROR_COUNT -gt 0 ]; then
    echo "   1. Corrija os erros listados acima"
    echo "   2. Execute 'php artisan migrate' se houver migrations pendentes"
    echo "   3. Verifique as permiss√µes: chmod -R 775 storage bootstrap/cache"
    echo "   4. Limpe os caches: php artisan cache:clear"
fi

if [ $WARN_COUNT -gt 0 ]; then
    echo "   ‚Ä¢ Revise os avisos para otimizar o sistema"
    echo "   ‚Ä¢ Monitore os logs: tail -f storage/logs/laravel.log"
fi

echo "   ‚Ä¢ Teste as funcionalidades manualmente"
echo "   ‚Ä¢ Monitore o sistema por alguns minutos ap√≥s o deploy"
echo ""
echo "üìö Documenta√ß√£o: guia-implementacao-servidor.md"
echo "======================================"

# C√≥digo de sa√≠da baseado nos resultados
if [ $ERROR_COUNT -gt 0 ]; then
    exit 1
elif [ $WARN_COUNT -gt 0 ]; then
    exit 2
else
    exit 0
fi
